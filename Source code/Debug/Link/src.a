;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void userEnter();
;int checkUserID(const char ID[3]);
;_Bool checkPassCode(const char PC[3], int address);
;void AdminEdit();
;void UserEdit();
;void getName(int address);
;void storeNewPC(const char newPC[3], int address);
;void rawData();
;void readData();
;unsigned char EE_Read(unsigned int address);
;void EE_Write(unsigned int address, unsigned char data);
;void motor();
;void Buzz();
;char keypad();
;void main(void)
; 0000 001D {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 001E //LCD
; 0000 001F DDRC = 0b00000111;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0020 PORTC = 0b11111000;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0021 lcd_init(16);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0022 
; 0000 0023 //Push-Down button Interrupt
; 0000 0024 DDRD.2 = 0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0025 DDRD.3 = 0;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0026 PORTD.2 = 1;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0027 PORTD.3 = 1;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0028 
; 0000 0029 //SOUNDER
; 0000 002A DDRD.5 = 1;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 002B 
; 0000 002C //Interrupt
; 0000 002D GICR |= (1 << INT0);                 // Enable INT0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002E GICR |= (1 << INT1);                // Enable INT1
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002F 
; 0000 0030 MCUCR |= (1 << ISC01) | (1 << ISC00); // Trigger INT0 on rising edge
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0031 MCUCR |= (1 << ISC11) | (1 << ISC10); // Trigger INT1 on rising edge
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0032 
; 0000 0033 SREG.7 = 1; // Enable global interrupts
;PCODE: $0000002A VOL: 0
; 0000 0034 
; 0000 0035 
; 0000 0036 //Motor
; 0000 0037 DDRD.0 = 1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0038 DDRD.1 = 1;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0039 
; 0000 003A rawData(); // Call rawData once to store data in EEPROM
;PCODE: $0000002F VOL: 0
; 0000 003B 
; 0000 003C while (1)
;PCODE: $00000030 VOL: 0
; 0000 003D {
; 0000 003E char number = keypad();
; 0000 003F lcd_clear();
;PCODE: $00000031 VOL: 0
;	number -> Y+0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0040 
; 0000 0041 if (number == '*')
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0042 {
; 0000 0043 userEnter();
;PCODE: $00000038 VOL: 0
; 0000 0044 }
; 0000 0045 }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0046 }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;void userEnter()
; 0000 0049 {
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 004A char ID[3];
; 0000 004B char PC[3];
; 0000 004C int IdAddres;
; 0000 004D bool pcCode;
; 0000 004E int i;
; 0000 004F 
; 0000 0050 lcd_clear();
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;	ID -> Y+9
;	PC -> Y+6
;	IdAddres -> R16,R17
;	pcCode -> R19
;	i -> R20,R21
;PCODE: $00000044 VOL: 0
; 0000 0051 lcd_printf("Enter your ID : ");
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0052 for (i = 0; i < 3; i++)
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0053 {
; 0000 0054 ID[i] = keypad();
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0055 lcd_putchar(ID[i]);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0056 }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0057 
; 0000 0058 // Check EEPROM for ID
; 0000 0059 IdAddres = checkUserID(ID);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 005A if (IdAddres)
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 005B {
; 0000 005C lcd_clear();
;PCODE: $0000006A VOL: 0
; 0000 005D lcd_printf("Enter Your PC : ");
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 005E 
; 0000 005F for (i = 0; i < 3; i++)
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0060 {
; 0000 0061 PC[i] = keypad();
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0062 lcd_putchar(PC[i]);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0063 }
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0064 pcCode = checkPassCode(PC, IdAddres);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0065 if(!pcCode)
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0066 {
; 0000 0067 lcd_clear();
;PCODE: $00000092 VOL: 0
; 0000 0068 lcd_printf("Sorry Wrong PC");   //1 peep
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0069 Buzz();
;PCODE: $0000009A VOL: 0
; 0000 006A }
; 0000 006B else
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 006C {
; 0000 006D lcd_clear();
;PCODE: $0000009D VOL: 0
; 0000 006E getName(IdAddres);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 006F motor();
;PCODE: $000000A0 VOL: 0
; 0000 0070 }
;PCODE: $000000A1 VOL: 0
; 0000 0071 }
; 0000 0072 else{
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0073 lcd_clear();
;PCODE: $000000A4 VOL: 0
; 0000 0074 lcd_printf("Wrong ID");    // 2 peep
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0075 Buzz();
;PCODE: $000000AC VOL: 0
; 0000 0076 Buzz();
;PCODE: $000000AD VOL: 0
; 0000 0077 }
;PCODE: $000000AE VOL: 0
; 0000 0078 
; 0000 0079 }
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;int checkUserID(const char ID[3]){
; 0000 007B int checkUserID(const char ID[3]){
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 007C int eeprom_address = 6;
; 0000 007D char eeprom_ID;
; 0000 007E int found = 0;
; 0000 007F int i;
; 0000 0080 int j;
; 0000 0081 for (i = 0; i < 3; i++)
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;	ID -> Y+10
;	eeprom_address -> R16,R17
;	eeprom_ID -> R19
;	found -> R20,R21
;	i -> Y+8
;	j -> Y+6
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0082 {
; 0000 0083 eeprom_address = 6 + i * 14;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0084 for (j = 0; j < 3; j++)
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0085 {
; 0000 0086 EEPROM_WAIT;  // Wait till EEPROM is ready
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0087 eeprom_ID = EE_Read(eeprom_address) + '0';
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0088 delay_ms(500);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0089 if (eeprom_ID == ID[j])
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 008A {
; 0000 008B found += 1; // Increment the count when a match is found
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 008C }
; 0000 008D eeprom_address++;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 008E }
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 008F if (found == 3)
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0090 return eeprom_address + 1 ; else
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0091 {
; 0000 0092 found = 0; // Reset the count for the next iteration
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0093 }
;PCODE: $000000FD VOL: 0
; 0000 0094 }
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0095 return false;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0096 }
;PCODE: $00000108 VOL: 0
;_Bool checkPassCode(const char PC[3], int address){
; 0000 0098 _Bool checkPassCode(const char PC[3], int address){
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0099 char eeprom_PC;
; 0000 009A int i;
; 0000 009B 
; 0000 009C for (i = 0; i < 3; i++)
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;	PC -> Y+6
;	address -> R20,R21
;	eeprom_PC -> R17
;	i -> R18,R19
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 009D {
; 0000 009E EEPROM_WAIT;  // Wait till EEPROM is ready
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 009F eeprom_PC = EE_Read(address) + '0';  // Convert digit to character
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00A0 if (eeprom_PC != PC[i])
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00A1 {
; 0000 00A2 return false; // PC does not match, return false
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00A3 }
; 0000 00A4 address++;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00A5 }
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00A6 
; 0000 00A7 return true; // PC matches, return true
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00A8 }
;PCODE: $00000135 VOL: 0
;void getName(int address){
; 0000 00AA void getName(int address){
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00AB int i;
; 0000 00AC char name;
; 0000 00AD address = address-10;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;	address -> R20,R21
;	i -> R16,R17
;	name -> R19
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00AE lcd_printf("Welcome, ");
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00AF for( i=0; i<5 ;i++)
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00B0 {
; 0000 00B1 name = EE_Read(address);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00B2 lcd_printf("%c",name);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00B3 address++;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00B4 }
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00B5 }
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;void AdminEdit()
; 0000 00B8 {
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00B9 char userID[3];
; 0000 00BA char newUserPC[3];
; 0000 00BB char confirmPC[3];
; 0000 00BC int userIdAddres;
; 0000 00BD int i;
; 0000 00BE 
; 0000 00BF lcd_clear();
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;	userID -> Y+10
;	newUserPC -> Y+7
;	confirmPC -> Y+4
;	userIdAddres -> R16,R17
;	i -> R18,R19
;PCODE: $00000168 VOL: 0
; 0000 00C0 lcd_printf("Enter user ID: ");
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00C1 
; 0000 00C2 for (i = 0; i < 3; i++) {
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00C3 userID[i] = keypad();
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00C4 lcd_putchar(userID[i]);
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00C5 }
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00C6 
; 0000 00C7 userIdAddres = checkUserID(userID);
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00C8 
; 0000 00C9 if (userIdAddres) {
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00CA lcd_clear();
;PCODE: $0000018E VOL: 0
; 0000 00CB lcd_printf("Enter new PC: ");
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00CC 
; 0000 00CD for (i = 0; i < 3; i++) {
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 00CE newUserPC[i] = keypad();
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 00CF lcd_putchar(newUserPC[i]);
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 00D0 }
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 00D1 
; 0000 00D2 lcd_clear();
;PCODE: $000001AF VOL: 0
; 0000 00D3 lcd_printf("Renter new PC: ");
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 00D4 
; 0000 00D5 for (i=0;i<3;i++)
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 00D6 {
; 0000 00D7 confirmPC[i] = keypad();
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 00D8 lcd_putchar(newUserPC[i]);
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 00D9 }
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 00DA 
; 0000 00DB for (i=0;i<3;i++)
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 00DC {
; 0000 00DD if(confirmPC[i] != newUserPC[i])
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00DE {
; 0000 00DF lcd_clear();
;PCODE: $000001E1 VOL: 0
; 0000 00E0 lcd_printf("Contact Admin");
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 00E1 Buzz();
;PCODE: $000001E9 VOL: 0
; 0000 00E2 Buzz();
;PCODE: $000001EA VOL: 0
; 0000 00E3 return;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 00E4 }
; 0000 00E5 }
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 00E6 lcd_clear();
;PCODE: $000001F4 VOL: 0
; 0000 00E7 lcd_printf("New PassCode saved");
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 00E8 delay_ms(100);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 00E9 storeNewPC( newUserPC,userIdAddres);
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 00EA 
; 0000 00EB } else {
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 00EC lcd_clear();
;PCODE: $00000205 VOL: 0
; 0000 00ED lcd_printf("Contact Admin");
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 00EE delay_ms(100);
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 00EF Buzz();
;PCODE: $00000210 VOL: 0
; 0000 00F0 Buzz();
;PCODE: $00000211 VOL: 0
; 0000 00F1 }
;PCODE: $00000212 VOL: 0
; 0000 00F2 
; 0000 00F3 lcd_clear(); // Clear the LCD after the loop
;PCODE: $00000213 VOL: 0
; 0000 00F4 
; 0000 00F5 }
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;void UserEdit() {
; 0000 00F7 void UserEdit() {
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 00F8 char userID[3];
; 0000 00F9 char newUserPC[3];
; 0000 00FA char confirmPC[3];
; 0000 00FB int userIdAddres;
; 0000 00FC int i;
; 0000 00FD 
; 0000 00FE lcd_clear();
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;	userID -> Y+10
;	newUserPC -> Y+7
;	confirmPC -> Y+4
;	userIdAddres -> R16,R17
;	i -> R18,R19
;PCODE: $0000021C VOL: 0
; 0000 00FF lcd_printf("Enter user ID: ");
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0100 
; 0000 0101 for (i = 0; i < 3; i++) {
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 0102 userID[i] = keypad();
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 0103 lcd_putchar(userID[i]);
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 0104 }
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 0105 
; 0000 0106 userIdAddres = checkUserID(userID);
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 0107 
; 0000 0108 if (userIdAddres) {
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0109 lcd_clear();
;PCODE: $00000242 VOL: 0
; 0000 010A lcd_printf("Enter user PC: ");
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 010B 
; 0000 010C for (i = 0; i < 3; i++) {
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 010D newUserPC[i] = keypad();
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 010E lcd_putchar(newUserPC[i]);
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 010F }
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 0110 if(!(checkPassCode(newUserPC , userIdAddres)))
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 0111 {
; 0000 0112 lcd_clear();
;PCODE: $00000269 VOL: 0
; 0000 0113 lcd_printf("Contact Admin");
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 0114 Buzz();
;PCODE: $00000271 VOL: 0
; 0000 0115 Buzz();
;PCODE: $00000272 VOL: 0
; 0000 0116 return;
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 0117 }
; 0000 0118 lcd_clear();
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 0119 lcd_printf("Enter new PC: ");
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 011A 
; 0000 011B for (i = 0; i < 3; i++) {
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 011C newUserPC[i] = keypad();
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 011D lcd_putchar(newUserPC[i]);
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 011E }
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 011F 
; 0000 0120 lcd_clear();
;PCODE: $00000298 VOL: 0
; 0000 0121 lcd_printf("Renter new PC: ");
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 0122 
; 0000 0123 for (i=0;i<3;i++)
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 0124 {
; 0000 0125 confirmPC[i] = keypad();
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 0126 lcd_putchar(confirmPC[i]);
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 0127 }
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 0128 
; 0000 0129 for (i=0;i<3;i++)
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 012A {
; 0000 012B if(confirmPC[i] != newUserPC[i])
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 012C {
; 0000 012D lcd_clear();
;PCODE: $000002CA VOL: 0
; 0000 012E lcd_printf("Contact Admin");
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 012F Buzz();
;PCODE: $000002D2 VOL: 0
; 0000 0130 Buzz();
;PCODE: $000002D3 VOL: 0
; 0000 0131 return;
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 0132 }
; 0000 0133 }
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 0134 lcd_clear();
;PCODE: $000002DD VOL: 0
; 0000 0135 lcd_printf("New PassCode saved");
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 0136 delay_ms(100);
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 0137 storeNewPC( newUserPC,userIdAddres);
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 0138 
; 0000 0139 } else {
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 013A lcd_clear();
;PCODE: $000002EE VOL: 0
; 0000 013B lcd_printf("Contact Admin");
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 013C delay_ms(100);
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 013D Buzz();
;PCODE: $000002F9 VOL: 0
; 0000 013E Buzz();
;PCODE: $000002FA VOL: 0
; 0000 013F }
;PCODE: $000002FB VOL: 0
; 0000 0140 
; 0000 0141 
; 0000 0142 lcd_clear(); // Clear the LCD after the loop
;PCODE: $000002FC VOL: 0
; 0000 0143 }
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;void storeNewPC(const char newPC[3], int address){
; 0000 0145 void storeNewPC(const char newPC[3], int address){
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 0146 int eeprom_address = address;
; 0000 0147 int i;
; 0000 0148 int digit;
; 0000 0149 
; 0000 014A for (i = 0; i < 3; i++)
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;	newPC -> Y+8
;	address -> Y+6
;	eeprom_address -> R16,R17
;	i -> R18,R19
;	digit -> R20,R21
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 014B {
; 0000 014C EEPROM_WAIT;  // Wait till EEPROM is ready
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0000 014D delay_ms(500);
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 014E 
; 0000 014F // Convert character to integer
; 0000 0150 digit = newPC[i] - '0';
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 0151 
; 0000 0152 // Print debugging information
; 0000 0153 lcd_clear();
;PCODE: $0000031E VOL: 0
; 0000 0154 //lcd_printf("Writing %d to %d", digit, eeprom_address);
; 0000 0155 //delay_ms(1000);
; 0000 0156 
; 0000 0157 EE_Write(eeprom_address, digit);
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 0158 eeprom_address++;
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0000 0159 }
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 015A }
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;void rawData()
; 0000 015D {
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 015E char user_names[][6] = {"Alice", "Robrt", "Charl"};
; 0000 015F short user_ids[] = {111, 503, 504};
; 0000 0160 short user_passwords[] = {564, 923, 546};
; 0000 0161 int userIndex;
; 0000 0162 int i;
; 0000 0163 int eeprom_address = 0; // Starting EEPROM address for sequential reading
; 0000 0164 
; 0000 0165 for (userIndex = 0; userIndex < sizeof(user_ids) / sizeof(user_ids[0]); userIndex++)
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;	user_names -> Y+18
;	user_ids -> Y+12
;	user_passwords -> Y+6
;	userIndex -> R16,R17
;	i -> R18,R19
;	eeprom_address -> R20,R21
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 0166 {
; 0000 0167 // Write User Name to EEPROM (fixed length)
; 0000 0168 for (i = 0; i < 5; ++i)
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 0169 {
; 0000 016A EE_Write(eeprom_address, user_names[userIndex][i]);
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 016B eeprom_address++;
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 016C }
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 016D 
; 0000 016E // Delimiter between user name and ID
; 0000 016F EE_Write(eeprom_address, DELIMITER);
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
; 0000 0170 eeprom_address++;
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 0171 
; 0000 0172 // Write User ID (3 digits) to EEPROM
; 0000 0173 EE_Write(eeprom_address, user_ids[userIndex] / 100);
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0000 0174 EE_Write(eeprom_address + 1, (user_ids[userIndex] / 10) % 10);
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 0175 EE_Write(eeprom_address + 2, user_ids[userIndex] % 10);
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 0176 eeprom_address += 3; // Move to the next address for the next data
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 0177 
; 0000 0178 // Delimiter between user id and password
; 0000 0179 EE_Write(eeprom_address, DELIMITER);
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
; 0000 017A eeprom_address++;
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0000 017B 
; 0000 017C // Write User Password (3 digits) to EEPROM
; 0000 017D EE_Write(eeprom_address, user_passwords[userIndex] / 100);
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 017E EE_Write(eeprom_address + 1, (user_passwords[userIndex] / 10) % 10);
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 017F EE_Write(eeprom_address + 2, user_passwords[userIndex] % 10);
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0000 0180 eeprom_address += 3; // Move to the next address for the next data
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0000 0181 
; 0000 0182 // Delimiter between different users
; 0000 0183 EE_Write(eeprom_address, DELIMITER);
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0000 0184 eeprom_address++;
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0000 0185 }
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
; 0000 0186 
; 0000 0187 // Mark the end of data with 0xFFFF
; 0000 0188 EE_Write(eeprom_address, 0xFF);
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0000 0189 EE_Write(eeprom_address + 1, 0xFF);
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
; 0000 018A EE_Write(eeprom_address + 2, 0xFF);
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
; 0000 018B }
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;void readData()
; 0000 018E {
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
; 0000 018F int eeprom_address = 0; // Starting EEPROM address for sequential reading
; 0000 0190 int i;
; 0000 0191 for(i = 0; i < 3; i++)
;PCODE: $000003D4 VOL: 0
;	eeprom_address -> R16,R17
;	i -> R18,R19
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
; 0000 0192 {
; 0000 0193 int i = 0;               // Reset i for each user
; 0000 0194 char user_name[6];       // Fixed size for user names
; 0000 0195 int user_id;
; 0000 0196 int user_password;
; 0000 0197 
; 0000 0198 // Read User Name from EEPROM (fixed length)
; 0000 0199 for (i = 0; i < 5; ++i)
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;	i -> Y+10
;	user_name -> Y+4
;	user_id -> Y+2
;	user_password -> Y+0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
; 0000 019A {
; 0000 019B user_name[i] = EE_Read(eeprom_address);
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
; 0000 019C eeprom_address++;
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
; 0000 019D }
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0000 019E user_name[5] = '\0'; // Null-terminate the string
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0000 019F 
; 0000 01A0 // Check and skip delimiter between user name and ID
; 0000 01A1 if (EE_Read(eeprom_address) != DELIMITER)
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0000 01A2 {
; 0000 01A3 // Handle delimiter error or end of data
; 0000 01A4 break;
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 01A5 }
; 0000 01A6 eeprom_address++;
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
; 0000 01A7 
; 0000 01A8 // Read User ID (3 digits) from EEPROM
; 0000 01A9 user_id = EE_Read(eeprom_address) * 100 +
; 0000 01AA EE_Read(eeprom_address + 1) * 10 +
; 0000 01AB EE_Read(eeprom_address + 2);
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
; 0000 01AC eeprom_address += 3; // Move to the next address for the next data
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
; 0000 01AD 
; 0000 01AE // Check and skip delimiter between user id and password
; 0000 01AF if (EE_Read(eeprom_address) != DELIMITER)
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
; 0000 01B0 {
; 0000 01B1 // Handle delimiter error or end of data
; 0000 01B2 break;
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 01B3 }
; 0000 01B4 eeprom_address++;
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
; 0000 01B5 
; 0000 01B6 // Read User Password (3 digits) from EEPROM
; 0000 01B7 user_password = EE_Read(eeprom_address) * 100 +
; 0000 01B8 EE_Read(eeprom_address + 1) * 10 +
; 0000 01B9 EE_Read(eeprom_address + 2);
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
; 0000 01BA eeprom_address += 3; // Move to the next address for the next data
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
; 0000 01BB 
; 0000 01BC // Check and skip delimiter between different users
; 0000 01BD if (EE_Read(eeprom_address) != DELIMITER)
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 01BE {
; 0000 01BF // Handle delimiter error or end of data
; 0000 01C0 break;
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
; 0000 01C1 }
; 0000 01C2 eeprom_address++;
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
; 0000 01C3 
; 0000 01C4 // Display the read data
; 0000 01C5 lcd_clear();
;PCODE: $00000448 VOL: 0
; 0000 01C6 //lcd_printf("Name: %s, ID: %d, P: %d\n", user_name, user_id, user_password);
; 0000 01C7 //delay_ms(900);
; 0000 01C8 }
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
; 0000 01C9 }
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;unsigned char EE_Read(unsigned int address)
; 0000 01CC {
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
; 0000 01CD EEPROM_WAIT;    // Wait till EEPROM is ready
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;	address -> R16,R17
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
; 0000 01CE EEAR = address; // Prepare the address you want to read from
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
; 0000 01CF EECR.0 = 1;      // Execute read command
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
; 0000 01D0 return EEDR;
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
; 0000 01D1 }
;PCODE: $00000465 VOL: 0
;void EE_Write(unsigned int address, unsigned char data)
; 0000 01D4 {
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
; 0000 01D5 EEPROM_WAIT;    // Wait till EEPROM is ready
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;	address -> R18,R19
;	data -> R17
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
; 0000 01D6 EEAR = address; // Prepare the address you want to read from
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
; 0000 01D7 EEDR = data;    // Prepare the data you want to write in the address above
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
; 0000 01D8 EECR.2 = 1;      // Master write enable
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
; 0000 01D9 EECR.1 = 1;      // Write Enable
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
; 0000 01DA EEPROM_WAIT;    // Wait till EEPROM is ready
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
; 0000 01DB EECR.1 = 0;      // Clear Write Enable bit
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
; 0000 01DC }
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;void motor()
; 0000 01DF {
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0000 01E0 int i;
; 0000 01E1 for (i = 0; i < 5; i++) {
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;	i -> R16,R17
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
; 0000 01E2 // Door closed
; 0000 01E3 PORTD |= (1 << PORTD0);  // PORTD.0 = 1
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
; 0000 01E4 PORTD &= ~(1 << PORTD1); // PORTD.1 = 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
; 0000 01E5 delay_ms(1000);
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
; 0000 01E6 
; 0000 01E7 // Door opening
; 0000 01E8 PORTD &= ~(1 << PORTD0); // PORTD.0 = 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
; 0000 01E9 delay_ms(1000);
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
; 0000 01EA 
; 0000 01EB //        // Door open
; 0000 01EC //        PORTD |= (1 << PORTD1);  // PORTD.1 = 1
; 0000 01ED //        delay_ms(1000);
; 0000 01EE //
; 0000 01EF //        // Door closing
; 0000 01F0 //        PORTD &= ~(1 << PORTD1); // PORTD.1 = 0
; 0000 01F1 //        delay_ms(1000);
; 0000 01F2 }
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
; 0000 01F3 }
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;void Buzz()
; 0000 01F6 {
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 0000 01F7 PORTD.5 = 1; // Assuming PD5 is connected to the sounder
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0000 01F8 delay_ms(100); // Adjust the delay as needed
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
; 0000 01F9 PORTD.5 = 0;
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
; 0000 01FA }
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;char keypad()
; 0000 01FD {
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
; 0000 01FE while (1)
;PCODE: $000004B2 VOL: 0
; 0000 01FF {
; 0000 0200 PORTC.0 = 0; // C0 is on, C1 and C2 are off
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 0201 PORTC.1 = 1;
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
; 0000 0202 PORTC.2 = 1;
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
; 0000 0203 
; 0000 0204 switch (PINC)
;PCODE: $000004B9 VOL: 0
; 0000 0205 {
; 0000 0206 case 0b11110110:
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
; 0000 0207 while (PINC.3 == 0)
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
; 0000 0208 ; // While the button is pressed, Wait!
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
; 0000 0209 return '1';
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
; 0000 020A break;
;PCODE: $000004C4 VOL: 0
; 0000 020B 
; 0000 020C case 0b11101110:
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
; 0000 020D while (PINC.4 == 0)
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
; 0000 020E ; // While the button is pressed, Wait!
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0000 020F return '4';
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
; 0000 0210 break;
;PCODE: $000004D0 VOL: 0
; 0000 0211 
; 0000 0212 case 0b11011110:
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0000 0213 while (PINC.5 == 0)
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
; 0000 0214 ; // While the button is pressed, Wait!
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
; 0000 0215 return '7';
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0000 0216 break;
;PCODE: $000004DC VOL: 0
; 0000 0217 
; 0000 0218 case 0b10111110:
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
; 0000 0219 case 0b10111101:
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
; 0000 021A case 0b10111011:
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
; 0000 021B while (PINC.6 == 0)
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
; 0000 021C ; // While the button is pressed, Wait!
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
; 0000 021D return '*';
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
; 0000 021E break;
;PCODE: $000004F2 VOL: 0
; 0000 021F }
;PCODE: $000004F3 VOL: 0
; 0000 0220 
; 0000 0221 PORTC.0 = 1; // C1 is on, C0 and C2 are off
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
; 0000 0222 PORTC.1 = 0;
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
; 0000 0223 PORTC.2 = 1;
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
; 0000 0224 
; 0000 0225 switch (PINC)
;PCODE: $000004FA VOL: 0
; 0000 0226 {
; 0000 0227 case 0b11110101:
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
; 0000 0228 while (PINC.3 == 0)
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
; 0000 0229 ; // While the button is pressed, Wait!
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
; 0000 022A return '2';
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
; 0000 022B break;
;PCODE: $00000505 VOL: 0
; 0000 022C 
; 0000 022D case 0b11101101:
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
; 0000 022E while (PINC.4 == 0)
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
; 0000 022F ; // While the button is pressed, Wait!
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
; 0000 0230 return '5';
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
; 0000 0231 break;
;PCODE: $00000511 VOL: 0
; 0000 0232 
; 0000 0233 case 0b11011101:
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
; 0000 0234 while (PINC.5 == 0)
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
; 0000 0235 ; // While the button is pressed, Wait!
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
; 0000 0236 return '8';
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
; 0000 0237 break;
;PCODE: $0000051D VOL: 0
; 0000 0238 
; 0000 0239 case 0b10111101:
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
; 0000 023A while (PINC.6 == 0)
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
; 0000 023B ; // While the button is pressed, Wait!
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
; 0000 023C return '0';
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
; 0000 023D break;
;PCODE: $00000529 VOL: 0
; 0000 023E }
;PCODE: $0000052A VOL: 0
; 0000 023F 
; 0000 0240 PORTC.0 = 1; // C2 is on, C0 and C1 are off
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
; 0000 0241 PORTC.1 = 1;
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
; 0000 0242 PORTC.2 = 0;
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
; 0000 0243 
; 0000 0244 switch (PINC)
;PCODE: $00000531 VOL: 0
; 0000 0245 {
; 0000 0246 case 0b11110011:
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
; 0000 0247 while (PINC.3 == 0)
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
; 0000 0248 ; // While the button is pressed, Wait!
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
; 0000 0249 return '3';
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
; 0000 024A break;
;PCODE: $0000053C VOL: 0
; 0000 024B 
; 0000 024C case 0b11101011:
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
; 0000 024D while (PINC.4 == 0)
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
; 0000 024E ; // While the button is pressed, Wait!
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
; 0000 024F return '6';
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
; 0000 0250 break;
;PCODE: $00000548 VOL: 0
; 0000 0251 
; 0000 0252 case 0b11011011:
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
; 0000 0253 while (PINC.5 == 0)
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
; 0000 0254 ; // While the button is pressed, Wait!
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
; 0000 0255 return '9';
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
; 0000 0256 break;
;PCODE: $00000554 VOL: 0
; 0000 0257 }
;PCODE: $00000555 VOL: 0
; 0000 0258 }
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
; 0000 0259 }
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;interrupt [2] void ext_int0_isr(void)
; 0000 025C {
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
; 0000 025D char adminPC[3];
; 0000 025E int i;
; 0000 025F bool admin;
; 0000 0260 lcd_clear();
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;	adminPC -> Y+4
;	i -> R16,R17
;	admin -> R19
;PCODE: $0000055E VOL: 0
; 0000 0261 lcd_printf("Enter Admin PC: ");
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
; 0000 0262 
; 0000 0263 for (i = 0; i < 3; i++)
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
; 0000 0264 {
; 0000 0265 adminPC[i] = keypad();
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
; 0000 0266 lcd_putchar(adminPC[i]);
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
; 0000 0267 }
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
; 0000 0268 
; 0000 0269 admin = checkPassCode(adminPC, 10);
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
; 0000 026A 
; 0000 026B // Check Admin PC
; 0000 026C if (!admin)
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
; 0000 026D {
; 0000 026E lcd_clear();
;PCODE: $00000587 VOL: 0
; 0000 026F lcd_printf("Contact Admin");
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
; 0000 0270 Buzz();
;PCODE: $0000058F VOL: 0
; 0000 0271 Buzz();
;PCODE: $00000590 VOL: 0
; 0000 0272 }
; 0000 0273 else
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
; 0000 0274 AdminEdit();
;PCODE: $00000593 VOL: 0
; 0000 0275 }
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;interrupt [3] void ext_int1_isr(void)
; 0000 0278 {
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
; 0000 0279 UserEdit();
;PCODE: $0000059C VOL: 0
; 0000 027A }
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
